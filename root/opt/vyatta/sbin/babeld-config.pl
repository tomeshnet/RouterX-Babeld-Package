#!/usr/bin/perl

#babeld-config.pl
#v0.1

use strict;
use lib "/opt/vyatta/share/perl5/";
use Data::Dumper;

#config
my $config_path = "/etc/babeld.conf";
my $init_script = "/etc/init.d/babeld";

my $config_out = '';

use Vyatta::Config;
my $c = new Vyatta::Config();

$c->setLevel('protocols babeld');


open(my $fh, '>', $config_path) || die "Couldn't open $config_path - $!";

$config_out  = "#\n# autogenerated by $0 on " . `date` . "#\n";

if ($c->returnValue("protocol-group") ne "" ) {$config_out .= "protocol-group " . $c->returnValue("protocol-group")  . "\n"; }
if ($c->returnValue("protocol-port") ne "" ) {$config_out .= "protocol-port"  . $c->returnValue("protocol-port")  . "\n"; }
if ($c->returnValue("kernel-priority") ne "" ) {$config_out .= "kernel-priority " . $c->returnValue("kernel-priority")  . "\n"; }
if ($c->returnValue("reflect-kernel-metric") ne "" ) {$config_out .= "reflect-kernel-metric " . $c->returnValue("reflect-kernel-metric")  . "\n"; }
if ($c->returnValue("allow-duplicates") ne "" ) {$config_out .= "allow-duplicates " . $c->returnValue("allow-duplicates")  . "\n"; }
if ($c->returnValue("random-id") ne "" ) {$config_out .= "random-id " . $c->returnValue("random-id")  . "\n"; }
if ($c->returnValue("ipv6-subtrees") ne "" ) {$config_out .= "ipv6-subtrees " . $c->returnValue("ipv6-subtrees")  . "\n"; }
if ($c->returnValue("debug") ne "" ) {$config_out .= "debug " . $c->returnValue("debug")  . "\n"; }
if ($c->returnValue("local-port") ne "" ) {$config_out .= "local-port " . $c->returnValue("local-port")  . "\n"; }
if ($c->returnValue("local-port-readwrite") ne "" ) {$config_out .= "local-port-readwrite "  . $c->returnValue("local-port-readwrite")  . "\n"; }
if ($c->returnValue("local-path") ne "" ) {$config_out .= "local-path " . $c->returnValue("local-path")  . "\n"; }
if ($c->returnValue("local-path-readwrite") ne "" ) {$config_out .= "local-path-readwrite " . $c->returnValue("local-path-readwrite")  . "\n"; }
if ($c->returnValue("export-table") ne "" ) {$config_out .= "export-table " . $c->returnValue("export-table")  . "\n"; }
if ($c->returnValue("import-table") ne "" ) {$config_out .= "import-table " . $c->returnValue("import-table")  . "\n"; }
if ($c->returnValue("link-detect") ne "" ) {$config_out .= "link-detect " . $c->returnValue("link-detect") . "\n"; }
if ($c->returnValue("diversity") ne "" ) {$config_out .= "diversity " . $c->returnValue("diversity") . "\n"; }
if ($c->returnValue("diversity-factor") ne "" ) {$config_out .= "diversity-factor " . $c->returnValue("diversity-factor") . "\n"; }
if ($c->returnValue("smoothing-half-life") ne "" ) {$config_out .= "smoothing-half-life " . $c->returnValue("smoothing-half-life") . "\n"; }
if ($c->returnValue("skip-kernel-setup") ne "" ) {$config_out .= "skip-kernel-setup " . $c->returnValue("skip-kernel-setup") . "\n"; }
if ($c->returnValue("router-id") ne "" ) {$config_out .= "router-id " . $c->returnValue("router-id") . "\n"; }
if ($c->returnValue("first-table-number") ne "" ) {$config_out .= "first-table-number " . $c->returnValue("first-table-number"). "\n"; }
if ($c->returnValue("first-rule-priority") ne "" ) {$config_out .= "first-rule-priority " . $c->returnValue("first-rule-priority") . "\n"; }


my @listen_interfaces  = $c->listNodes('interface');
foreach my $int (@listen_interfaces) {

    $config_out .= "interface $int ";
    if ($c->returnValue("interface $int channel") ne "" ) {$config_out .= "channel " . $c->returnValue("interface $int channel")  . " "; }
    if ($c->returnValue("interface $int enable-timestamps") ne "" ) {$config_out .= "enable-timestamps " . $c->returnValue("interface $int enable-timestamps")  . " "; }
    if ($c->returnValue("interface $int faraway") ne "" ) {$config_out .= "faraway " . $c->returnValue("interface $int faraway")  . " "; }
    if ($c->returnValue("interface $int hello-interval") ne "" ) {$config_out .= "hello-interval " . $c->returnValue("interface $int hello-interval")  . " "; }
    if ($c->returnValue("interface $int link-quality") ne "" ) {$config_out .= "link-quality " . $c->returnValue("interface $int link-quality")  . " "; }
    if ($c->returnValue("interface $int max-rtt-penalty") ne "" ) {$config_out .= "max-rtt-penalty " . $c->returnValue("interface $int max-rtt-penalty")  . " "; }
    if ($c->returnValue("interface $int rfc6126-compatible") ne "" ) {$config_out .= "rfc6126-compatible " . $c->returnValue("interface $int rfc6126-compatible")  . " "; }
    if ($c->returnValue("interface $int rtt-decay") ne "" ) {$config_out .= "rtt-decay " . $c->returnValue("interface $int rtt-decay")  . " "; }
    if ($c->returnValue("interface $int rtt-max") ne "" ) {$config_out .= "rtt-max " . $c->returnValue("interface $int rtt-max")  . " "; }
    if ($c->returnValue("interface $int rtt-min") ne "" ) {$config_out .= "rtt-min " . $c->returnValue("interface $int rtt-min")  . " "; }
    if ($c->returnValue("interface $int rxcost") ne "" ) {$config_out .= "rxcost " . $c->returnValue("interface $int rxcost")  . " "; }
    if ($c->returnValue("interface $int split-horizon") ne "" ) {$config_out .= "split-horizon " . $c->returnValue("interface $int split-horizon")  . " "; }
    if ($c->returnValue("interface $int type") ne "" ) {$config_out .= "type " . $c->returnValue("interface $int type")  . " "; }
    if ($c->returnValue("interface $int unicast") ne "" ) {$config_out .= "unicast " . $c->returnValue("interface $int unicast")  . " "; }
    if ($c->returnValue("interface $int update-interval") ne "" ) {$config_out .= "update-interval " . $c->returnValue("interface $int update-interval")  . " "; }
    $config_out .= "\n";
}

my @filters  = $c->listNodes('filter');
foreach my $id (@filters) {

    $config_out .= $c->returnValue("filter $id type") . " ";
    if ($c->returnValue("filter $id ip") ne "" ) {$config_out .= "ip " . $c->returnValue("filter $id ip") . " ";}
    if ($c->returnValue("filter $id eq") ne "" ) {$config_out .= "eq " . $c->returnValue("filter $id eq") . " ";}
    if ($c->returnValue("filter $id le") ne "" ) {$config_out .= "le " . $c->returnValue("filter $id le") . " ";}
    if ($c->returnValue("filter $id ge") ne "" ) {$config_out .= "ge " . $c->returnValue("filter $id ge") . " ";}
    if ($c->returnValue("filter $id src-ip") ne "" ) {$config_out .= "src-ip " . $c->returnValue("filter $id src-ip") . " ";}
    if ($c->returnValue("filter $id src-eq") ne "" ) {$config_out .= "src-eq " . $c->returnValue("filter $id src-eq") . " ";}
    if ($c->returnValue("filter $id src-le") ne "" ) {$config_out .= "src-le " . $c->returnValue("filter $id src-le") . " ";}
    if ($c->returnValue("filter $id src-ge") ne "" ) {$config_out .= "src-ge " . $c->returnValue("filter $id src-ge") . " ";}
    if ($c->returnValue("filter $id neigh") ne "" ) {$config_out .= "neigh " . $c->returnValue("filter $id neigh") . " ";}
    if ($c->returnValue("filter $id id") ne "" ) {$config_out .= "id " . $c->returnValue("filter $id id") . " ";}
    if ($c->returnValue("filter $id proto") ne "" ) {$config_out .= "proto " . $c->returnValue("filter $id proto") . " ";}
    if ($c->returnValue("filter $id local") eq "true" ) {$config_out .= "local ";}
    if ($c->returnValue("filter $id if") ne "" ) {$config_out .= "if " . $c->returnValue("filter $id if") . " ";}
    if ($c->returnValue("filter $id action") ne "" ) {$config_out .= $c->returnValue("filter $id action") . " ";}

    $config_out .= "\n";
}

my @redistributeIF  = $c->listNodes('redistribute interface');
foreach my $int (@redistributeIF) {
    my $local="";
    my $res=$c->returnValue("redistribute interface $int local");

    if ( $res eq "false" ) {
      $local="";
    } else {
      $local=" local ";
    }
    $config_out .= "redistribute $local if $int\n";
}
if ( $c->returnValue('denydefault') eq "true" ) { $config_out .= "redistribute deny\n"; }
if ( $c->returnValue('denydefaultlocal') eq "true" ) { $config_out .= "redistribute local deny\n"; }


print $fh $config_out;
close $fh;

# Restart babeld
system("/etc/init.d/babeld stop >&/dev/null");
system("/etc/init.d/babeld start >&/dev/null");
